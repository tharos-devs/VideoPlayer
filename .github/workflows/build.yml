name: Build VideoPlayer

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Manual triggering

permissions:
  contents: write
  packages: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            name: Windows x64
            artifact_name: videoplayer-windows-x64
            
          - platform: macos-latest
            target: aarch64-apple-darwin
            name: macOS Apple Silicon
            artifact_name: videoplayer-macos-arm64
            
          - platform: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            name: Linux x64
            artifact_name: videoplayer-linux-x64

    runs-on: ${{ matrix.platform }}
    name: Build ${{ matrix.name }}
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
        
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          
      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
          
      - name: Install app dependencies
        run: npm install

      - name: Create platform-specific icons
        run: |
          echo "Creating platform-specific icons..."
          if [ -f "src-tauri/icons/icon.png" ]; then
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              echo "Creating ICO icon for Windows..."
              if magick src-tauri/icons/icon.png -resize 256x256 src-tauri/icons/icon.ico 2>/dev/null; then
                echo "✅ Created icon.ico with ImageMagick"
              else
                echo "⚠️ ImageMagick failed, copying PNG as ICO"
                cp src-tauri/icons/icon.png src-tauri/icons/icon.ico
              fi
            elif [[ "$RUNNER_OS" == "macOS" ]]; then
              echo "Creating ICNS icon for macOS..."
              if sips -s format icns src-tauri/icons/icon.png --out src-tauri/icons/icon.icns 2>/dev/null; then
                echo "✅ Created icon.icns with sips"
              else
                echo "⚠️ sips failed, copying PNG as ICNS"
                cp src-tauri/icons/icon.png src-tauri/icons/icon.icns
              fi
            fi
          else
            echo "❌ icon.png not found"
            ls -la src-tauri/icons/
          fi
          
          # Verify required icons
          for icon in "32x32.png" "128x128.png" "128x128@2x.png" "icon.png"; do
            if [ -f "src-tauri/icons/$icon" ]; then
              echo "✅ Found $icon"
            else
              echo "❌ Missing $icon"
            fi
          done
        shell: bash

      - name: Create copy-assets script
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo '@echo off' > copy-assets.bat
            echo 'echo Assets copying completed' >> copy-assets.bat
            echo 'exit /b 0' >> copy-assets.bat
          else
            echo '#!/bin/bash' > copy-assets.sh
            echo 'echo "Assets copying completed"' >> copy-assets.sh
            echo 'exit 0' >> copy-assets.sh
            chmod +x copy-assets.sh
          fi
        shell: bash
          
      - name: Build application  
        run: npm run tauri:build -- --target ${{ matrix.target }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            src-tauri/target/${{ matrix.target }}/release/bundle/**/*
          retention-days: 30