name: Release Build

on:
  workflow_dispatch: # Manual release
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
  push:
    tags:
      - 'v*'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.result }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create release
        id: create-release
        uses: actions/github-script@v6
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${{ github.event.inputs.version || github.ref_name }}`,
              name: `VideoPlayer ${{ github.event.inputs.version || github.ref_name }}`,
              body: `## VideoPlayer Release ${{ github.event.inputs.version || github.ref_name }}
              
              ### Features
              - ✅ **FFmpeg bundled** - No system installation required
              - ✅ **Cross-platform** - Windows, macOS, Linux
              - ✅ **Ultra-low latency** video streaming
              - ✅ **WebRTC** real-time video control
              
              ### Downloads
              Choose the build for your platform:
              - **Windows x64**: Most Windows computers
              - **Windows ARM64**: Windows 11 ARM devices  
              - **macOS Intel**: Intel-based Macs
              - **macOS Apple Silicon**: M1/M2/M3 Macs
              - **Linux x64**: Most Linux distributions
              
              ### Installation
              1. Download the appropriate file for your platform
              2. Install/extract and run
              3. No additional dependencies required!`,
              draft: false,
              prerelease: false
            })
            return data.id

  build-release:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            name: Windows x64
            
          - platform: windows-latest  
            target: aarch64-pc-windows-msvc
            name: Windows ARM64
            
          - platform: macos-latest
            target: x86_64-apple-darwin
            name: macOS Intel
            
          - platform: macos-latest
            target: aarch64-apple-darwin  
            name: macOS Apple Silicon
            
          - platform: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            name: Linux x64

    runs-on: ${{ matrix.platform }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          
      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'
          
      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
          
      - name: Install dependencies
        run: npm install
        
      - name: Create icons
        run: |
          if [ -f "src-tauri/icons/icon.png" ]; then
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              magick src-tauri/icons/icon.png -resize 256x256 src-tauri/icons/icon.ico 2>/dev/null || cp src-tauri/icons/icon.png src-tauri/icons/icon.ico
            elif [[ "$RUNNER_OS" == "macOS" ]]; then
              sips -s format icns src-tauri/icons/icon.png --out src-tauri/icons/icon.icns 2>/dev/null || cp src-tauri/icons/icon.png src-tauri/icons/icon.icns
            fi
          fi
        shell: bash
        
      - name: Create assets script
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            echo '@echo off' > copy-assets.bat && echo 'echo Assets copied' >> copy-assets.bat
          else
            echo '#!/bin/bash' > copy-assets.sh && echo 'echo Assets copied' >> copy-assets.sh && chmod +x copy-assets.sh
          fi
        shell: bash
        
      - name: Build and release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          args: --target ${{ matrix.target }}